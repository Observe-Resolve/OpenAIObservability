mode: statefulset
nameOverride: otel
image:
  repository: otel/opentelemetry-collector-contrib
  tag: 0.110.0

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "otelcontribcol"

service:
  # Enable the creation of a Service.
  # By default, it's enabled on mode != daemonset.
  # However, to enable it on mode = daemonset, its creation must be explicitly enabled
  # enabled: true
  type: ClusterIP
ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
    # nodePort: 30317
    appProtocol: grpc
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    protocol: TCP

  zipkin:
    enabled: true
    containerPort: 9411
    servicePort: 9411
    hostPort: 9411
    protocol: TCP
  metrics:
    # The metrics port is disabled by default. However you need to enable the port
    # in order to use the ServiceMonitor (serviceMonitor.enabled) or PodMonitor (podMonitor.enabled).
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP
# This also supports template content, which will eventually be converted to yaml.
extraVolumeMounts:
  - mountPath: /var/log
    name: varlog
    readOnly: true
  - mountPath: /var/lib/docker/containers
    name: varlibdockercontainers
    readOnly: true

extraVolumes:
  - name: varlog
    hostPath:
      path: /var/log
  - name: varlibdockercontainers
    hostPath:
      path: /var/lib/docker/containers

extraEnvs:
  - name: CLUSTER_ID
    valueFrom:
      secretKeyRef:
        name: dynatrace
        key: clusterid
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: DT_ENDPOINT
    valueFrom:
      secretKeyRef:
        name: dynatrace
        key: dynatrace_oltp_url
  - name: DT_API_TOKEN
    valueFrom:
      secretKeyRef:
        name: dynatrace
        key: dt_api_token
  - name: MY_POD_IP
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: status.podIP
  - name: CLUSTERNAME
    valueFrom:
      secretKeyRef:
        name: dynatrace
        key: clustername
  - name: OTEL_SERVICE_NAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.labels['app.kubernetes.io/component']
  - name: OTEL_RESOURCE_ATTRIBUTES
    value: service.name=$(OTEL_SERVICE_NAME)
resources:
  limits:
    memory: 512Mi
config:
  receivers:

    prometheus:
      config:
        scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 5s
            static_configs:
              - targets:
                  - ${MY_POD_IP}:8888



    otlp:
      protocols:
        grpc: { }
        http: { }
  processors:
    batch:
      send_batch_max_size: 1000
      timeout: 30s
      send_batch_size: 800

    memory_limiter:
      check_interval: 1s
      limit_percentage: 70
      spike_limit_percentage: 30



    k8sattributes/k8S:
      extract:
        metadata:
          - k8s.cluster.uid
      pod_association:
        - sources:
            - from: resource_attribute
              name: k8s.namespace.name
    k8sattributes:
      extract:
        metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.cluster.uid
      pod_association:
        - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
        - sources:
            - from: resource_attribute
              name: k8s.pod.ip
        - sources:
            - from: resource_attribute
              name: k8s.pod.uid
        - sources:
            - from: connection
    resource:
      attributes:
        - key: k8s.cluster.name
          value: ${CLUSTERNAME}
          action: insert



    transform/k8s:
      error_mode: ignore
      log_statements:
        - context: log
          statements:
            - merge_maps(cache, body, "upsert")
            - set(attributes["k8s.object.kind"], cache["kind"]) where cache["kind"] != nil
            - merge_maps(cache,cache["metadata"], "upsert") where cache["metadata"] != nil
            - set(attributes["k8s.namespace.name"], cache["namespace"]) where cache["namespace"] != nil
            - merge_maps(cache,ExtractPatterns(String(cache["ownerReferences"]),"^.*kind\\\":\\\"(?P<kindowner>[^\"]*)\".*name\\\":\\\"(?P<nameowner>[^\"]*)\\\".*$"), "upsert") where cache["ownerReferences"] != nil
            - set(attributes["dt.kubernetes.workload.kind"], ConvertCase( cache["kindowner"], "lower") ) where cache["kindowner"] != nil
            - set(attributes["dt.kubernetes.workload.name"], cache["nameowner"]) where cache["nameowner"] != nil
            - set(attributes["k8s.object.labels"], cache["labels"]) where cache["labels"] != nil
            - set(attributes["k8s.pod.name"], cache["name"]) where cache["name"] != nil
            - merge_maps(cache,cache["spec"], "upsert") where cache["spec"] != nil
            - set(attributes["k8s.object.nodeselector"], String(cache["nodeSelector"])) where cache["nodeSelector"]!= nil
            - set(attributes["k8s.node.name"], cache["nodeName"]) where cache["nodeName"]!= nil
            - set(attributes["k8s.status"],cache["status"]) where cache["status"] != nil
    transform/histogram:
      error_mode: propagate
      metric_statements:
        - context: metric
          statements:
            - convert_exponential_histogram_to_histogram("random", [10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0])
    transform:
      error_mode: ignore
      log_statements:
        - context: resource
          statements:
            - set(attributes["dt.kubernetes.workload.kind"], "statefulset") where IsString(attributes["k8s.statefulset.name"])
            - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.statefulset.name"]) where IsString(attributes["k8s.statefulset.name"])
            - set(attributes["dt.kubernetes.workload.kind"], "deployment") where IsString(attributes["k8s.deployment.name"])
            - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.deployment.name"]) where IsString(attributes["k8s.deployment.name"])
            - set(attributes["dt.kubernetes.workload.kind"], "daemonset") where IsString(attributes["k8s.daemonset.name"])
            - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.daemonset.name"]) where IsString(attributes["k8s.daemonset.name"])
            - set(attributes["dt.kubernetes.cluster.id"], attributes["k8s.cluster.uid"]) where IsString(attributes["k8s.cluster.uid"])

      trace_statements:
        - context: resource
          statements:
            - set(attributes["dt.kubernetes.workload.kind"], "statefulset") where IsString(attributes["k8s.statefulset.name"])
            - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.statefulset.name"]) where IsString(attributes["k8s.statefulset.name"])
            - set(attributes["dt.kubernetes.workload.kind"], "deployment") where IsString(attributes["k8s.deployment.name"])
            - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.deployment.name"]) where IsString(attributes["k8s.deployment.name"])
            - set(attributes["dt.kubernetes.workload.kind"], "daemonset") where IsString(attributes["k8s.daemonset.name"])
            - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.daemonset.name"]) where IsString(attributes["k8s.daemonset.name"])
            - set(attributes["dt.kubernetes.cluster.id"], attributes["k8s.cluster.uid"]) where IsString(attributes["k8s.cluster.uid"])

      metric_statements:
        - context: resource
          statements:
            - set(attributes["dt.kubernetes.workload.kind"], "statefulset") where IsString(attributes["k8s.statefulset.name"])
            - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.statefulset.name"]) where IsString(attributes["k8s.statefulset.name"])
            - set(attributes["dt.kubernetes.workload.kind"], "deployment") where IsString(attributes["k8s.deployment.name"])
            - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.deployment.name"]) where IsString(attributes["k8s.deployment.name"])
            - set(attributes["dt.kubernetes.workload.kind"], "daemonset") where IsString(attributes["k8s.daemonset.name"])
            - set(attributes["dt.kubernetes.workload.name"], attributes["k8s.daemonset.name"]) where IsString(attributes["k8s.daemonset.name"])
            - set(attributes["dt.kubernetes.cluster.id"], attributes["k8s.cluster.uid"]) where IsString(attributes["k8s.cluster.uid"])

    cumulativetodelta: { }



  exporters:


    otlphttp:
      endpoint: ${DT_ENDPOINT}/api/v2/otlp
      headers:
        Authorization: "Api-Token ${DT_API_TOKEN}"
    debug:
      verbosity: detailed

  service:
    pipelines:

      traces:
        receivers: [ otlp ]
        processors: [ memory_limiter,k8sattributes,transform,batch ]
        exporters: [ otlphttp ]
      metrics:
        receivers: [ otlp,prometheus ]
        processors: [ memory_limiter,k8sattributes,transform, transform/histogram,cumulativetodelta,batch ]
        exporters: [ otlphttp ]
      logs:
        receivers: [ otlp ]
        processors: [ memory_limiter,k8sattributes,transform,batch ]
        exporters: [ otlphttp ]

    telemetry:
      metrics:
        address: ${MY_POD_IP}:8888
      traces:
        processors:
          - batch:
              exporter:
                otlp:
                  protocol: grpc/protobuf
                  endpoint: http://${MY_POD_IP}:4317